Asdl <- Rules EOF

Rules <- __ Rule __ { rules = 
			rule_realloc(rules, (num_rules + 1) * sizeof(Rule*));
		      rule[num_rules++] = rule;
		    }

Rule  <- TypeId __ '=' __ Types  { rule = rule_alloc(sizeof(Rule));
			     rule->id = type_id;
			     rule->types = types;
			     rule->num_types = num_types;
			     types = NULL;
			     num_types = 0;
			   }


Types <- Type ( __ '|' __ Type) { types = 
				   type_realloc(types, 
				   	(num_types) * sizeof(Type*));
				  types[num_types++] = type;				
				}
				       
				      

Type <- SumType / ProductType  { type = type_alloc(sizeof(Type));
				      type->kind = last_type_kind;
				      if (last_type_kind == TYPE_PRODUCT)
				      	type->product = prodtype;
				      else
				      	type->sum = sumtype;
		                 }


ProductType <- Fields		 {
				    prodtype = prod_alloc(sizeof(ProductType));
				    prodtype->fields = fields;
				    prodtype->num_fields = num_fields;
				    last_type_kind = PRODUCT;
				    fields = NULL;
				    num_fields = 0;
				}

SumType <- Constructors __ Attr? { sumtype = sum_alloc(sizeof(SumType));
				   sumtype->constructors = cons;
				   sumtype->num_constructors = num_cons;
				   sumtype->attrs = attrs;
				   sumtype->num_attrs = num_attrs;
				   last_type_kind = SUM;
				   attrs = NULL;
				   num_attrs = 0;
				   cons = NULL;
				   num_cons = 0;
				 }

Attr <- "attributes" __ Fields	{ attrs = attrs_alloc(num_fields, sizeof(Field*));
				  memmove(&attrs[0], &fields[0], num_fields * sizeof(Field*)); 
				  num_attrs = num_fields; 
				  fields = NULL;
				  num_fields = 0;
				}

Constructors <- Constructor __ ( __ '/' __ Constructor)* { cons = 
							    con_realloc(cons, 
							    	(num_cons + 1) * sizeof(Constructor*));
							   cons[num_cons++] = con;
							 }

Constructor <- ConId __ Fields?			  { con = cons_alloc(sizeof(Constructor));
							con->id = cons_id;
							con->fields = fields;
							con->num_fields = num_fields;
							fields = NULL;
							num_fields = 0;
						  }

Fields <- '(' __ Field ( __ ',' __ Field )* __ ')' { fields = 
							field_realloc(fields, 
								(num_fields + 1) * sizeof(Field*));
						     fields[num_fields++] = field;
						   }


Field <- TypeId Modifier? __ Ident { field = fields_alloc(sizeof(Field));
				field->type_id = type_id;
				field->id = identifier;
				field->kind = MOD_LUT[modifier];
			   }

Modifier <- < '*' / '?' >		{ modifier = *yytext; }

Ident <- CStyleIdentifier		{ identifier = cstyle_id; }

ConId <- PascalCaseIdentifier		{ cons_id = pascalcase_id; }

TypeId <- LowerCaseIdentifier		{ type_id = lowercase_id; }

CStyleIdentifier <- < Letter ( Digit / Letter / '_' )* >			    {
										cstyle_id = dup_str(&yytext[0],
												yyleng);
									    }

PascalCaseIdentifier <- UpperCaseLetter (UpperCaseLetter / Digit / '_')*    {
										pascalcase_id = dup_str(&yytext[0],
												yyleng);
									    }

LowerCaseIdentifier <- < LowerCaseLetter (LowerCaseLetter / Digit / '_')* > {
										lowercase_id = dup_str(&yytext[0],
												yyleng);
									    }

Letter <- UpperCaseLetter / LowerCaseLetter

UpperCaseLetter <- [A-Z]

LowerCaseLetter <- [a-z]

Digit <- [0-9]

__ <- [ \r\n\t]*

EOF <- !.
