Asdl <- Rules __ EOF

Rules <- Rule ( __ ';' __ Rule )* { 
    rules = rule_realloc(rules, (num_rules + 1) * sizeof(Rule*));
    rules[num_rules++] = rule;
    printf("Rule");
}

Rule  <- LhsTypeName Type __ { 
    rule = rule_alloc(sizeof(Rule));
    rule->id = type_id;
    rule->type = type;
    type = NULL;
    type_id = NULL;
}

LhsTypeName <- TypeId __ '=' __

Type <- SumType / ProductType  { 
    type = type_alloc(sizeof(Type));
    type->kind = last_type_kind;
    if (last_type_kind == PRODUCT)
        type->product = prodtype;
    else
        type->sum = sumtype;
    printf("Type");
}

ProductType <- Fields {
    prodtype = prod_alloc(sizeof(Product));
    prodtype->fields = fields;
    prodtype->num_fields = num_fields;
    last_type_kind = PRODUCT;
    fields = NULL;
    num_fields = 0;
    printf("Product");
}

SumType <- Constructors Attr? { 
    sumtype = sum_alloc(sizeof(Sum));
    sumtype->cons = cons;
    sumtype->num_cons = num_cons;
    if (attrs != NULL) {
        sumtype->attrs = attrs;
        sumtype->num_attrs = num_attrs;
    }
    last_type_kind = SUM;
    attrs = NULL;
    num_attrs = 0;
    cons = NULL;
    num_cons = 0;
}

Attr <- "attributes" __ Fields { 
    attrs = attrs_alloc(num_fields * sizeof(Field*));
    memmove(&attrs[0], &fields[0], num_fields * sizeof(Field*));
    num_attrs = num_fields;
    fields = NULL;
    num_fields = 0;
}

Constructors <- Constructor ( __ '|' __ Constructor )* { 
    cons = con_realloc(cons, (num_cons + 1) * sizeof(Constructor*));
    cons[num_cons++] = con;
}

Constructor <- ConId Fields? { 
    con = con_alloc(sizeof(Constructor));
    con->id = cons_id;
    if (fields != NULL) {
        con->fields = fields;
        con->num_fields = num_fields;
    }
    fields = NULL;
    num_fields = 0;
}

Fields <- '(' __ FieldPairs __ ')'  { 
    fields = field_realloc(fields, (num_fields + 1) * sizeof(Field*));
    fields[num_fields++] = field;
}

FieldPairs <-  Field ( __ ',' __ Field )*

Field <- ModType TypeId IdentOpt { 
    field = field_alloc(sizeof(Field));
    field->id = identifier;
    field->type_id = type_id;
    if (modifier && (modifier[0] == '*' || modifier[0] == '?')) {
        type->kind = *modifier == '*' ? SEQUENCE : OPTIONAL;
    } else {
        type->kind = NORMAL;
    }
    modifier = NULL;
    identifier = NULL;
    type_id = NULL;
}

IdentOpt <- Ident?

ModType <- TypeId Modifier?

Ident <- CStyleIdentifier __ { 
    identifier = cstyle_id; 
    printf("id"); 
}

ConId <- PascalCaseIdentifier __ { 
    cons_id = pascalcase_id; 
    printf("ps"); 
}

TypeId <- LowerCaseIdentifier __ { 
    type_id = lowercase_id; 
    printf("tyy"); 
}

CStyleIdentifier <- < Letter ( Digit / Letter / '_' )* > __ { 
    cstyle_id = dup_str(&yytext[0], yyleng);
    printf("cstyle");
}

PascalCaseIdentifier <- < UpperCaseLetter ( Letter / Digit / '_')* >  __ { 
    pascalcase_id = dup_str(&yytext[0], yyleng);
    printf("pp");
}

LowerCaseIdentifier <- < LowerCaseLetter ( LowerCaseLetter / Digit / '_')* > __ { 
    lowercase_id = dup_str(&yytext[0], yyleng);
    printf("lower");
}

Modifier <- < [*?] > { 
    modifier = dup_str(yytext, yyleng); 
}

Letter <- UpperCaseLetter / LowerCaseLetter

UpperCaseLetter <- [A-Z]

LowerCaseLetter <- [a-z]

Digit <- [0-9]

__ <- ( " " / "\r\n" / "\t" / "\n" )*

EOF <- !.

