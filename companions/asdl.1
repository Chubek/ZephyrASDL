.TH ASDL 1 "February 2024" "Version 1.1" "User Commands"

.SH NAME
asdl \- An implementation of the Zephyr ASDL Language, Targeting C

.SH SYNOPSIS
.B asdl
[\-o output_file] [\-\-def\_suffix def_suffix] [\-\-fn\_suffix fn_suffix] [\-\-kind\_suffix kind_suffix] [\-\-arg\_suffix arg_suffix] [\-\-fn\_prefix fn_prefix] INPUT_FILE

.SH DESCRIPTION
.B asdl
is an implementation of the Zephyr ASDL language, as specified by Wang, Appel, Korn, Serra in 1997 paper 'The Zephyr Abstract Syntax Description Language' (linked below). 

.Zephyr ASDL was originally implemented in C, and its targets included C, C++, Standard ML and so on. However, this implementation was bootstrapped onto itself, and besides that, it relied on SUIF for compilation. This version has lite dependencies and is much more hassle-free. However, it just targets C (at this moment).

ASDL language is a tree grammar used to describe language syntax, the output can be used to construct Abstract Syntax Trees.

The current version (1.1) is stable. It outputs correct code, with zero warnings or errors (as far as tested). 

.SH OPTIONS
.TP
.B \-o, \-\-output_file output_file
The output file (STDOUT by default)
.TP
.B \-\-def\_suffix def_suffix
Suffix used for typedef aliases (*def* by default).
.TP
.B \-\-fn\_suffix fn_suffix
Suffix used for function names (*fn* by default).
.TP
.B \-\-kind\_suffix kind_suffix
Suffix used for kind enumeration names (*kind* by default).
.TP
.B \-\-arg\_suffix arg_suffix
Suffix used for argument names (*arg* by default).
.TP
.B \-\-fn\_prefix fn_prefix
Suffix used for function signatures (empty by default, you can use `static` or `static inline`).

.SH ARGUMENTS
.TP
.B INPUT\_FILE
The ASDL specification file (STDIN by default)

.SH ASDL DOCUMENTATION
The documentation for ASDL language can be found at the original paper:
<https://www.cs.princeton.edu/~appel/papers/asdl97.pdf>

This implementation adds two YACC-like extensions to the file:

1- You can enclose C code between `%{` and `%}`, this will be inserted at the BEGINNING of the file before the translation.
2- You can insert a `%%` after the tree grammar, and anything you insert after it, C code that is, will be inserted AFTER the translation.

There are now several more built-in types: `int`, `uint`, `string`, `identifier`, `size`, `usize`, `boolean`

Also, see EXAMPLE to see how you can insert comments.

.SH EXAMPLE
This is a very basic ASDL that describes the syntax for **m4(1)** (the appendages are nonsense):

.EX
%{

// This prelude and the appendage below are just for demonstration
// This will be copied to start

#include <stddef.h>
static int IN = 0;

%}

# This is a comment

m4 = Macro(identifier name, macro definition) # This is another comment
   | NumberedArgument(int num)
   | WildCardArgument
   | CommaSepArgument

%%

// This will be copied to end

int main() {
  return IN;
}
.EE

.SH FILES
.TP
.B MANPAGE.md
This documentation in form of Markdown.
.TP
.B asdl.vim
VimScript syntax highlighter (you can copy it to the `/syntax` directory of NeoVim or Vim).
.TP
.B regex.asdl
Examples
.TP
.B basic.asdl
Examples

.SH COPYRIGHT
2024 \- Chubak Bidpaa (<chubakbidpaa@riseup.net>)

Released under GPL Version 3-or-later license.

Redistribution of this program complies with the conventions of above mentioned license.

.SH SEE ALSO
.B yacc(1), lex(1), peg(1), bnfc(1)

