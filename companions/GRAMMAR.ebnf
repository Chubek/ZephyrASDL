# Syntactic Grammar for Zephyr ASDL

definitions	::= [ prelude ] { definition | ignorable } [ conclude ]

definition	::= type-id '=' type-definition [ ';' ]

conclude	::= "%%" c-code end-of-file

prelude		::= "%{" c-code "%}"

type-definition	::= sum-type | product-type

product-type	::= fields-list

sum-type   	::= constructor { '|' constructor } [ "attributes" fields-list ]

constructor	::= con-id [ fields-list ]

fields-list	::= '(' field { ',' field } ')'

field 		::= field-type [ '?' | '*' ] [ field-name ]

field-name	::= name-id

field-type	::= predef-type | type-id

# Lexical Grammar for Zephyr ASDL
 
predef-type	::= "int" 
		 | "uint"
		 | "byte"
		 | "ubyte"
		 | "long"
		 | "ulong"
		 | "char"
		 | "uchar"
		 | "short"
		 | "ushort"
 		 | "size" 
		 | "usize"
		 | "boolean" 
		 | "string"
		 | "float"
		 | "double"
		 | "identifier"

name-id		::= letter { letter | digit | '_' }

con-id		::= upper { letter | digit | '_' }

type-id		::= lower { lower | digit |  '_' }

letter		::= upper | lower

digit		::= '0' | '1' | '2' | ... | '7' | '8' | '9'

lower		::= 'a' | 'b' | 'c' | ... | 'x' | 'y' | 'z'

upper		::= 'A' | 'B' | 'C' | ... | 'X' | 'Y' | 'Z'

c-code		::= ? any valid-c-code ?

ignorable	::= whitespace | comment

comment		::= "# " { no-newline } newline

no-newline	::= ? matches anything except newline ?

whitespace	::= ' '
		 | tabulator

end-of-file	::= ? matches end of file ?

tabulator	::= ? matches tab character ?

newline		::= ? matches newline ?
